for(block in seq(from=1,to=27, by=3))
{
submt  <- mt[,(block:(block+2))+1]
#if likelihood dips to 25% set to NA
submt[submt$p1_left_handlikelihood<.33,1] <- NA
submt[submt$p1_left_handlikelihood<.33,2] <- NA
submt[,1:2] <- apply(submt[,1:2], 2, FUN = function(y){na.approx(y)}) #spline interpolation
submt[,1:2] <- apply(submt[,1:2], 2, FUN = function(y){y[is.na(y) <- 0]}) #spline interpolation
#smooth it
submt[,1:2] <- as.numeric(apply(submt[,1:2], 2, FUN = function(y){kolmogorov.it(y, 3, 3)})) #spline interpolation
#compute speed
speed <- speedXY.it(submt[,1], submt[,2], time_ms)
#save
MT <- cbind(speed, MT)
}
MT$time_ms <- time_ms
colnames(MT) <- c(snames, "time_ms")
MT <- matrix()
mt <- read.csv(paste0(curfolder, "/" ,mts[1]))
mt <- mt[-c(1:3), ]
colnames(mt) <- cnames
time_ms <- round(as.numeric(mt$frame)*(1000/29.97))
for(block in seq(from=1,to=27, by=3))
{
submt  <- mt[,(block:(block+2))+1]
#if likelihood dips to 25% set to NA
submt[submt$p1_left_handlikelihood<.33,1] <- NA
submt[submt$p1_left_handlikelihood<.33,2] <- NA
submt[,1:2] <- apply(submt[,1:2], 2, FUN = function(y){na.approx(y)}) #spline interpolation
submt[,1:2] <- apply(submt[,1:2], 2, FUN = function(y){y[is.na(y)] <- 0}) #spline interpolation
#smooth it
submt[,1:2] <- as.numeric(apply(submt[,1:2], 2, FUN = function(y){kolmogorov.it(y, 3, 3)})) #spline interpolation
#compute speed
speed <- speedXY.it(submt[,1], submt[,2], time_ms)
#save
MT <- cbind(speed, MT)
}
MT$time_ms <- time_ms
colnames(MT) <- c(snames, "time_ms")
apply(submt[,1:2], 2, FUN = function(y){y[is.na(y)] <- 0})
submt[,1:2] <- apply(submt[,1:2], 2, FUN = function(y){na.approx(y)}) #spline interpolation
submt[,1:2] <- apply(submt[,1:2], 2, FUN = function(y){ifelse(is.na(y), 0, y)})
submt[,1:2] <- apply(submt[,1:2], 2, FUN = function(y){na.approx(y, na.rm =FALSE)}) #spline interpolation
submt[,1:2] <- apply(submt[,1:2], 2, FUN = function(y){ifelse(is.na(y), 0, y)}) #spline interpolation
apply(submt[,1:2], 2, FUN = function(y){ifelse(is.na(y), 0, y)})
submt[,1:2] <- apply(submt[,1:2], 2, FUN = function(y){na.approx(y, na.rm =FALSE)}) #spline interpolation
submt[submt$p1_left_handlikelihood<.33,1] <- NA
submt[submt$p1_left_handlikelihood<.33,2] <- NA
submt[,1:2] <- apply(submt[,1:2], 2, FUN = function(y){na.approx(y, na.rm =FALSE)}) #spline interpolation
submt
submt  <- mt[,(block:(block+2))+1]
#if likelihood dips to 25% set to NA
submt[submt$p1_left_handlikelihood<.33,1] <- NA
submt[submt$p1_left_handlikelihood<.33,2] <- NA
submt[,1:2] <- apply(submt[,1:2], 2, FUN = function(y){na.approx(y, na.rm =FALSE)}) #spline interp
MT <- matrix()
mt <- read.csv(paste0(curfolder, "/" ,mts[1]))
mt <- mt[-c(1:3), ]
colnames(mt) <- cnames
time_ms <- round(as.numeric(mt$frame)*(1000/29.97))
for(block in seq(from=1,to=27, by=3))
{
submt  <- mt[,(block:(block+2))+1]
#if likelihood dips to 25% set to NA
submt[submt$p1_left_handlikelihood<.33,1] <- NA
submt[submt$p1_left_handlikelihood<.33,2] <- NA
submt[,1:2] <- apply(submt[,1:2], 2, FUN = function(y){na.approx(y, na.rm =FALSE)}) #spline interpolation
#smooth it
submt[,1:2] <- as.numeric(apply(submt[,1:2], 2, FUN = function(y){kolmogorov.it(y, 3, 3)})) #spline interpolation
#compute speed
speed <- speedXY.it(submt[,1], submt[,2], time_ms)
speed[is.na(speed)] <- 0
#save
MT <- cbind(speed, MT)
}
MT$time_ms <- time_ms
colnames(MT) <- c(snames, "time_ms")
MT
speed
MT
MT <- matrix()
mt <- read.csv(paste0(curfolder, "/" ,mts[1]))
mt <- mt[-c(1:3), ]
colnames(mt) <- cnames
time_ms <- round(as.numeric(mt$frame)*(1000/29.97))
for(block in seq(from=1,to=27, by=3))
{
submt  <- mt[,(block:(block+2))+1]
#if likelihood dips to 25% set to NA
submt[submt$p1_left_handlikelihood<.33,1] <- NA
submt[submt$p1_left_handlikelihood<.33,2] <- NA
submt[,1:2] <- apply(submt[,1:2], 2, FUN = function(y){na.approx(y, na.rm =FALSE)}) #spline interpolation
#smooth it
submt[,1:2] <- as.numeric(apply(submt[,1:2], 2, FUN = function(y){kolmogorov.it(y, 3, 3)})) #spline interpolation
#compute speed
speed <- speedXY.it(submt[,1], submt[,2], time_ms)
speed[is.na(speed)] <- 0
#save
MT <- cbind(speed, MT)
}
MT <- as.data.frame(MT)
MT$time_ms <- time_ms
colnames(MT) <- c(snames, "time_ms")
submt  <- mt[,(block:(block+2))+1]
#if likelihood dips to 25% set to NA
submt[submt$p1_left_handlikelihood<.33,1] <- NA
submt[submt$p1_left_handlikelihood<.33,2] <- NA
submt[,1:2] <- apply(submt[,1:2], 2, FUN = function(y){na.approx(y, na.rm =FALSE)}) #spline interpolation
#smooth it
submt[,1:2] <- as.numeric(apply(submt[,1:2], 2, FUN = function(y){kolmogorov.it(y, 3, 3)})) #spline interpolation
#compute speed
speed <- speedXY.it(submt[,1], submt[,2], time_ms)
#if likelihood dips to 25% set to NA
submt[submt$p1_left_handlikelihood<.33,1] <- NA
submt[submt$p1_left_handlikelihood<.33,2] <- NA
submt[,1:2] <- apply(submt[,1:2], 2, FUN = function(y){na.approx(y)}) #spline interpolation
submt  <- mt[,(block:(block+2))+1]
#if likelihood dips to 25% set to NA
submt[submt$p1_left_handlikelihood<.33,1] <- NA
submt[submt$p1_left_handlikelihood<.33,2] <- NA
submt[,1:2] <- apply(submt[,1:2], 2, FUN = function(y){na.approx(y, na.rm=FALSE)}) #splin
submt[,1:2] <- as.numeric(apply(submt[,1:2], 2, FUN = function(y){kolmogorov.it(y, 3, 3)})) #spline interpolation
speed <- speedXY.it(submt[,1], submt[,2], time_ms)
speed
speed[is.na(speed)] <- 0
speed
MT <- cbind(speed, MT)
MT
MT <- matrix()
mt <- read.csv(paste0(curfolder, "/" ,mts[1]))
mt <- mt[-c(1:3), ]
colnames(mt) <- cnames
time_ms <- round(as.numeric(mt$frame)*(1000/29.97))
for(block in seq(from=1,to=27, by=3))
{
submt  <- mt[,(block:(block+2))+1]
#if likelihood dips to 25% set to NA
submt[submt$p1_left_handlikelihood<.33,1] <- NA
submt[submt$p1_left_handlikelihood<.33,2] <- NA
submt[,1:2] <- apply(submt[,1:2], 2, FUN = function(y){na.approx(y, na.rm=TRUE)}) #spline interpolation
#smooth it
submt[,1:2] <- as.numeric(apply(submt[,1:2], 2, FUN = function(y){kolmogorov.it(y, 3, 3)})) #spline interpolation
#compute speed
speed <- speedXY.it(submt[,1], submt[,2], time_ms)
speed[is.na(speed)] <- 0
#save
MT <- cbind(MT,speed)
}
colnames(MT) <- c(snames)
MT <- as.data.frame(MT)
MT$time_ms <- time_ms
speed
MT
speed
MT <- matrix(rows=length(time_ms))
matrix(nrows=length(time_ms))
length(time_ms)
MT <- matrix(nrow=length(time_ms))
MT
mt <- read.csv(paste0(curfolder, "/" ,mts[1]))
mt <- mt[-c(1:3), ]
colnames(mt) <- cnames
time_ms <- round(as.numeric(mt$frame)*(1000/29.97))
MT <- matrix(nrow=length(time_ms))
for(block in seq(from=1,to=27, by=3))
{
submt  <- mt[,(block:(block+2))+1]
#if likelihood dips to 25% set to NA
submt[submt$p1_left_handlikelihood<.33,1] <- NA
submt[submt$p1_left_handlikelihood<.33,2] <- NA
submt[,1:2] <- apply(submt[,1:2], 2, FUN = function(y){na.approx(y, na.rm=TRUE)}) #spline interpolation
#smooth it
submt[,1:2] <- as.numeric(apply(submt[,1:2], 2, FUN = function(y){kolmogorov.it(y, 3, 3)})) #spline interpolation
#compute speed
speed <- speedXY.it(submt[,1], submt[,2], time_ms)
speed[is.na(speed)] <- 0
#save
MT <- cbind(MT,speed)
}
colnames(MT) <- c(snames)
MT <- as.data.frame(MT)
MT$time_ms <- time_ms
MT
MT <- MT[,-1]
colnames(MT) <- c(snames)
MT <- as.data.frame(MT)
MT$time_ms <- time_ms
MT
mt
mt <- read.csv(paste0(curfolder, "/" ,mts[1]))
mt <- mt[-c(1:3), ]
colnames(mt) <- cnames
time_ms <- round(as.numeric(mt$frame)*(1000/29.97))
MT <- matrix(nrow=length(time_ms))
for(block in seq(from=1,to=27, by=3))
{
submt  <- mt[,(block:(block+2))+1]
#if likelihood dips to 25% set to NA
submt[submt$p1_left_handlikelihood<.33,1] <- NA
submt[submt$p1_left_handlikelihood<.33,2] <- NA
submt[,1:2] <- apply(submt[,1:2], 2, FUN = function(y){na.approx(y, na.rm=TRUE)}) #spline interpolation
#smooth it
submt[,1:2] <- as.numeric(apply(submt[,1:2], 2, FUN = function(y){kolmogorov.it(y, 3, 3)})) #spline interpolation
#compute speed
speed <- speedXY.it(submt[,1], submt[,2], time_ms)
speed[is.na(speed)] <- 0
#save
MT <- cbind(MT,speed)
}
MT <- MT[,-1]
colnames(MT) <- c(snames)
MT <- as.data.frame(MT)
MT$time_ms <- time_ms
MT
mt <- read.csv(paste0(curfolder, "/" ,mts[1]))
mt <- mt[-c(1:3), ]
colnames(mt) <- cnames
time_ms <- round(as.numeric(mt$frame)*(1000/29.97))
MT <- matrix(nrow=length(time_ms))
for(block in seq(from=1,to=27, by=3))
{
submt  <- mt[,(block:(block+2))+1]
#if likelihood dips to 25% set to NA
submt[submt$p1_left_handlikelihood<.33,1] <- NA
submt[submt$p1_left_handlikelihood<.33,2] <- NA
submt[,1:2] <- apply(submt[,1:2], 2, FUN = function(y){na.approx(y, na.rm=TRUE)}) #spline interpolation
#smooth it
submt[,1:2] <- as.numeric(apply(submt[,1:2], 2, FUN = function(y){kolmogorov.it(y, 3, 3)})) #spline interpolation
#compute speed
speed <- speedXY.it(submt[,1], submt[,2], time_ms)
#save
MT <- cbind(MT,speed)
}
MT <- MT[,-1]
colnames(MT) <- c(snames)
MT <- as.data.frame(MT)
MT$time_ms <- time_ms
#write the data away
MT
curfolder
i
mts
substr(mt,1,2)
gr <- mts[1]
substr(gr,1,2)
paste0(curfolder, "/prepared/", substr(gr,1,2), ".csv")
for(gr in mts)
{
mt <- read.csv(paste0(curfolder, "/" ,gr))
mt <- mt[-c(1:3), ]
colnames(mt) <- cnames
time_ms <- round(as.numeric(mt$frame)*(1000/29.97))
MT <- matrix(nrow=length(time_ms))
for(block in seq(from=1,to=27, by=3))
{
submt  <- mt[,(block:(block+2))+1]
#if likelihood dips to 25% set to NA
submt[submt$p1_left_handlikelihood<.33,1] <- NA
submt[submt$p1_left_handlikelihood<.33,2] <- NA
submt[,1:2] <- apply(submt[,1:2], 2, FUN = function(y){na.approx(y, na.rm=TRUE)}) #spline interpolation
#smooth it
submt[,1:2] <- as.numeric(apply(submt[,1:2], 2, FUN = function(y){kolmogorov.it(y, 3, 3)})) #spline interpolation
#compute speed
speed <- speedXY.it(submt[,1], submt[,2], time_ms)
#save
MT <- cbind(MT,speed)
}
MT <- MT[,-1]
colnames(MT) <- c(snames)
MT <- as.data.frame(MT)
MT$time_ms <- time_ms
#write the data away
write.csv(MT, paste0(curfolder, "/prepared/", substr(gr,1,2), ".csv"))
}
for(gr in mts)
{
mt <- read.csv(paste0(curfolder, "/" ,gr))
mt <- mt[-c(1:3), ]
colnames(mt) <- cnames
time_ms <- round(as.numeric(mt$frame)*(1000/29.97))
MT <- matrix(nrow=length(time_ms))
for(block in seq(from=1,to=27, by=3))
{
submt  <- mt[,(block:(block+2))+1]
#if likelihood dips to 25% set to NA
submt[submt$p1_left_handlikelihood<.33,1] <- NA
submt[submt$p1_left_handlikelihood<.33,2] <- NA
submt[,1:2] <- apply(submt[,1:2], 2, FUN = function(y){na.approx(y, na.rm=FALSE)}) #spline interpolation
#smooth it
submt[,1:2] <- as.numeric(apply(submt[,1:2], 2, FUN = function(y){kolmogorov.it(y, 3, 3)})) #spline interpolation
#compute speed
speed <- speedXY.it(submt[,1], submt[,2], time_ms)
#save
MT <- cbind(MT,speed)
}
MT <- MT[,-1]
colnames(MT) <- c(snames)
MT <- as.data.frame(MT)
MT$time_ms <- time_ms
#write the data away
write.csv(MT, paste0(curfolder, "/prepared/", substr(gr,1,2), ".csv"))
}
for(gr in mts)
{
mt <- read.csv(paste0(curfolder, "/" ,gr))
mt <- mt[-c(1:3), ]
colnames(mt) <- cnames
time_ms <- round(as.numeric(mt$frame)*(1000/29.97))
MT <- matrix(nrow=length(time_ms))
for(block in seq(from=1,to=27, by=3))
{
submt  <- mt[,(block:(block+2))+1]
#if likelihood dips to 25% set to NA
submt[submt$p1_left_handlikelihood<.33,1] <- NA
submt[submt$p1_left_handlikelihood<.33,2] <- NA
submt[,1:2] <- apply(submt[,1:2], 2, FUN = function(y){na.approx(y, na.rm=FALSE)}) #spline interpolation
#smooth it
submt[,1:2] <- as.numeric(apply(submt[,1:2], 2, FUN = function(y){kolmogorov.it(y, 3, 3)})) #spline interpolation
#compute speed
speed <- speedXY.it(submt[,1], submt[,2], time_ms)
speed <- na.spline(speed, na.rm=FALSE)
#save
MT <- cbind(MT,speed)
}
MT <- MT[,-1]
colnames(MT) <- c(snames)
MT <- as.data.frame(MT)
MT$time_ms <- time_ms
#write the data away
write.csv(MT, paste0(curfolder, "/prepared/", substr(gr,1,2), ".csv"))
}
codings <- read.csv("group_10.csv")
codings <- read.csv("./group_10.csv")
codings <- read.csv("D:/Research_Projects/workshops_envision_TEMP/ELAN_REDO/group_10.csv")
codings
codings
codings <- codings[,-2]
codings
codings <- read.csv("D:/Research_Projects/workshops_envision_TEMP/ELAN_REDO/group_10.csv")
codings <- codings[,-3]
codings
codings <- read.csv("D:/Research_Projects/workshops_envision_TEMP/ELAN_REDO/group_10.csv")
codings <- codings[,-c(1:2)]
codings
substr(codings, nchar(codings[,3])-3, nchar(codings[,3]))
nchar(codings[,3])-3
nchar(codings[,3])
substr(codings[,3], nchar(codings[,3])-3, nchar(codings[,3]))
substr(codings[,3], nchar(codings[,3])-2, nchar(codings[,3]))
substr(codings[,3], nchar(codings[,3])-1, nchar(codings[,3]))
substr(codings[,3], nchar(codings[,3]), nchar(codings[,3]))
codings$tier <- substr(codings[,3], nchar(codings[,3]), nchar(codings[,3]))
substr(codings[,3], 1, nchar(codings[,3]))
nchar(codings[,3])-1
substr(codings[,3], 1, nchar(codings[,3])-1)
substr(codings[,3], 1, nchar(codings[,3])-3)
substr(codings[,3], 1, nchar(codings[,3])-4)
substr(codings[,3], 3, nchar(codings[,3])-4)
substr(codings[,3], 2, nchar(codings[,3])-4)
as.vector(substr(codings[,3], 2, nchar(codings[,3])-4))
cbind(codings[,1],codings[,2], codings[,3])
newcod <- cbind(codings[,1],codings[,2], cod, tier)
codings <- read.csv("D:/Research_Projects/workshops_envision_TEMP/ELAN_REDO/group_10.csv")
codings <- codings[,-c(1:2)]
tier <- as.vector(substr(codings[,3], nchar(codings[,3]), nchar(codings[,3])))
cod  <- as.vector(substr(codings[,3], 2, nchar(codings[,3])-4))
newcod <- cbind(codings[,1],codings[,2], cod, tier)
newcod
colnames(newcod) <- c("begintime", "endtime", "coding", "tier")
colnames(newcod) <- c("begintime", "endtime", "coding", "person")
colnames(newcod) <- c("begintime", "endtime", "coding", "person", "id")
newcod <- cbind(codings[,1],codings[,2], cod, tier, c(1:nrow(codings)))
colnames(newcod) <- c("begintime", "endtime", "coding", "person", "id")
1:nrow(codings)
c(1:nrow(codings)
)
codings <- read.csv("D:/Research_Projects/workshops_envision_TEMP/ELAN_REDO/group_10.csv")
codings <- codings[,-c(1:2)]
tier <- as.vector(substr(codings[,3], nchar(codings[,3]), nchar(codings[,3])))
cod  <- as.vector(substr(codings[,3], 2, nchar(codings[,3])-4))
newcod <- cbind(codings[,1],codings[,2], cod, tier, c(1:length(tier)))
colnames(newcod) <- c("begintime", "endtime", "coding", "person", "id")
newcod
write.csv(newcod, "D:/Research_Projects/workshops_envision_TEMP/ELAN_REDO/group_10_recoding.csv")
write.csv(newcod[newcod$person=="1",c(1,2,4)], "D:/Research_Projects/workshops_envision_TEMP/ELAN_REDO/group_10_p1.csv")
write.csv(newcod[newcod$person=="2",c(1,2,4)], "D:/Research_Projects/workshops_envision_TEMP/ELAN_REDO/group_10_p2.csv")
write.csv(newcod[newcod$person=="3",c(1,2,4)], "D:/Research_Projects/workshops_envision_TEMP/ELAN_REDO/group_10_p3.csv")
newcod$person=="1"
codings <- read.csv("D:/Research_Projects/workshops_envision_TEMP/ELAN_REDO/group_10.csv")
codings <- codings[,-c(1:2)]
tier <- as.vector(substr(codings[,3], nchar(codings[,3]), nchar(codings[,3])))
cod  <- as.vector(substr(codings[,3], 2, nchar(codings[,3])-4))
newcod <- cbind(codings[,1],codings[,2], cod, tier, c(1:length(tier)))
colnames(newcod) <- c("begintime", "endtime", "coding", "person", "id")
write.csv(newcod, "D:/Research_Projects/workshops_envision_TEMP/ELAN_REDO/group_10_recoding.csv")
write.csv(newcod[newcod$person=="1",c(1,2,4)], "D:/Research_Projects/workshops_envision_TEMP/ELAN_REDO/group_10_p1.csv")
write.csv(newcod[newcod$person=="2",c(1,2,4)], "D:/Research_Projects/workshops_envision_TEMP/ELAN_REDO/group_10_p2.csv")
write.csv(newcod[newcod$person=="3",c(1,2,4)], "D:/Research_Projects/workshops_envision_TEMP/ELAN_REDO/group_10_p3.csv")
newcod
codings <- read.csv("D:/Research_Projects/workshops_envision_TEMP/ELAN_REDO/group_10.csv")
codings <- codings[,-c(1:2)]
tier <- as.vector(substr(codings[,3], nchar(codings[,3]), nchar(codings[,3])))
cod  <- as.vector(substr(codings[,3], 2, nchar(codings[,3])-4))
newcod <- cbind.data.frame(codings[,1],codings[,2], cod, tier, c(1:length(tier)))
colnames(newcod) <- c("begintime", "endtime", "coding", "person", "id")
write.csv(newcod, "D:/Research_Projects/workshops_envision_TEMP/ELAN_REDO/group_10_recoding.csv")
write.csv(newcod[newcod$person=="1",c(1,2,4)], "D:/Research_Projects/workshops_envision_TEMP/ELAN_REDO/group_10_p1.csv")
write.csv(newcod[newcod$person=="2",c(1,2,4)], "D:/Research_Projects/workshops_envision_TEMP/ELAN_REDO/group_10_p2.csv")
write.csv(newcod[newcod$person=="3",c(1,2,4)], "D:/Research_Projects/workshops_envision_TEMP/ELAN_REDO/group_10_p3.csv")
install.packages("imagefluency")
#set current as working drive via session -> set working drive -> source file location
workingdrive <- dirname(getwd())
envd   <- paste0(workingdrive, "/Acoustics/")
mtd    <- paste0(workingdrive, "/MT/")
envs   <- list.files(envd, pattern = "*.csv")
mts    <- list.files(mtd, pattern = "*.csv")
perf   <- read.csv( paste0(workingdrive, "/PerformanceData/participant_info_Z.csv"), sep = "\t")
imagesfol <- paste0(workingdrive, "/Drawings/")
setwd("D:/Research_Projects/workshops_envision_TEMP/MultiscaleEntropy/Scripts")
#set current as working drive via session -> set working drive -> source file location
workingdrive <- dirname(getwd())
envd   <- paste0(workingdrive, "/Acoustics/")
mtd    <- paste0(workingdrive, "/MT/")
envs   <- list.files(envd, pattern = "*.csv")
mts    <- list.files(mtd, pattern = "*.csv")
perf   <- read.csv( paste0(workingdrive, "/PerformanceData/participant_info_Z.csv"), sep = "\t")
imagesfol <- paste0(workingdrive, "/Drawings/")
library(MSEntropy) #multiscale entropy
library(readr)
library(ggplot2)
library(gridExtra)
library(imagefluency)
library(imager)
perf$mults <-  perf$multsF <- perf$multsM <- perf$multsS <- NA
for(i in envs)
{
print(i)
gr    <- parse_number(i)
#acoustics (only one signal per group)
env   <- read.csv(paste0(envd, i))
(max(env$time_ms)/1000)60
}
library(MSEntropy) #multiscale entropy
library(readr)
library(ggplot2)
library(gridExtra)
library(imagefluency)
library(imager)
perf$mults <-  perf$multsF <- perf$multsM <- perf$multsS <- NA
for(i in envs)
{
print(i)
gr    <- parse_number(i)
#acoustics (only one signal per group)
env   <- read.csv(paste0(envd, i))
(max(env$time_ms)/1000)/60
}
#devtools::install_github("jcaude/MSEntropy")
library(MSEntropy) #multiscale entropy
library(readr)
library(ggplot2)
library(gridExtra)
library(imagefluency)
library(imager)
perf$mults <-  perf$multsF <- perf$multsM <- perf$multsS <- NA
for(i in envs)
{
print(i)
gr    <- parse_number(i)
#acoustics (only one signal per group)
env   <- read.csv(paste0(envd, i))
print((max(env$time_ms)/1000)/60)
}
env[env$time_ms<25*60*1000,]
img_complexity(grayscale(paste0(imagesfol, "group", gr)), algorithm = "zip", rotate = FALSE)
library(imager)
install.packages("imager")
img_complexity(grayscale(paste0(imagesfol, "group", gr)), algorithm = "zip", rotate = FALSE)
library(imager)
img_complexity(grayscale(paste0(imagesfol, "group", gr)), algorithm = "zip", rotate = FALSE)
img_complexity(paste0(imagesfol, "group", gr), algorithm = "zip", rotate = FALSE)
img_complexity(grayscale(paste0(imagesfol, "group", gr, ".jpg")), algorithm = "zip", rotate = FALSE)
grayscale(paste0(imagesfol, "group", gr, ".jpg")
)
paste0(imagesfol, "group", gr, ".jpg")
img <- readJPEG(paste0(imagesfol, "group", gr, ".jpg"))
library(jpeg)
img <- readJPEG(paste0(imagesfol, "group", gr, ".jpg"))
img
img_complexity(grayscale(img), algorithm = "zip", rotate = FALSE)
grayscale(img)
img <- readJPEG(paste0(imagesfol, "group", gr, ".jpg"), native = TRUE) #native = true for grayscale
img
img_complexity(img, algorithm = "zip", rotate = FALSE)
file.exists(paste0(imagesfol, "group", gr, ".jpg"))
setwd("D:/Research_Projects/workshops_envision_bootcamp/R/GestureNetworks_module2/DataEnvision/Scripts")
knitr::opts_chunk$set(echo = TRUE)
#packages
library(dtw)         #for dynamic time warping
library(rjson)       #for extracting json info
library(stringr)     #for manipulations of strings
library(ggplot2)     #plotting
library(plotly)     #plotting
library(htmltools)       #for dimensionality reduction
#set current as working drive via session -> set working drive -> source file location
workingdrive <- getwd()
basefolder   <- dirname(workingdrive)
timeserfolder <- paste0(basefolder, "/DataEnvision/TimeSeries/")
timesers <- list.files(timeserfolder)
timsers
timesers
paste0(basefolder, "/DataEnvision/TimeSeries/")
